{"version":3,"sources":["Display.js","Fetching.js","GeoLocation.js","App.js","serviceWorker.js","index.js"],"names":["display","props","console","log","farenTemp","state","temp","toFixed","desc","lon","lat","mainClass","weather","className","name","pressure","humidity","require","config","Fetching","this","nameVar","tempVar","pressureVar","humidityVar","weatherVar","axios","get","process","data","main","setState","Display","style","color","fontSize","marginBottom","textAlign","Component","GeoLocation","isGeolocationAvailable","isGeolocationEnabled","coords","latitude","longitude","backgroundImage","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAsCeA,EApCC,SAACC,GACfC,QAAQC,IAAI,gBAAiBF,GAC7B,IAAMG,GAA6C,GAA9BH,EAAMI,MAAMC,KAAQ,QAAY,EAAI,IAAKC,QAAQ,GAClEC,EAAO,GACPC,EAAM,EACNC,EAAM,EACNC,EAAY,kBAkBlB,OAhBMV,EAAMW,UACTJ,EAAOP,EAAMW,QAAN,MAGJX,EAAMI,MAAMI,MACdA,EAAMR,EAAMI,MAAMI,KAEhBR,EAAMI,MAAMK,MACdA,EAAMT,EAAMI,MAAMK,KAGjBA,EAAM,IAAMA,EAAM,IAAMD,GAAO,IAAMA,GAAO,KAC/CE,EAAU,kBAIJ,yBAAKE,UAAWF,GACtB,sDAA4BV,EAAMI,MAAMS,KAAxC,QACA,4BACE,4BAAI,gDAAJ,IAAmCV,EAAnC,cACA,4BAAI,yDAAJ,IAA4CH,EAAMI,MAAMU,UACxD,4BAAI,6CAAJ,IAAgCd,EAAMI,MAAMW,SAA5C,KACA,4BAAI,wCAAJ,IAA2BR,MC5B/BS,EAAQ,IAAUC,S,IAkEHC,E,YA/Db,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAM,CAACK,IAAK,KAAMD,IAAK,KAC5BK,KAAM,GAAIR,KAAM,KAChBS,SAAU,KACVC,SAAU,KACVJ,QAAS,IANQ,E,kNAWjBV,QAAQC,IAAI,0BAA2BiB,KAAKf,MAAMJ,O,SAG5CoB,EAAU,KACVC,EAAU,KACVC,EAAc,KACdC,EAAc,KACdC,EAAa,K,SAEOC,IAAMC,IAAIC,sDAAyCR,KAAKnB,MAAMS,IAAM,QAAUU,KAAKnB,MAAMQ,IAAM,2C,gBAA/GoB,E,EAAAA,KAER3B,QAAQC,IAAI,iBAAkB0B,GAE7BR,EAAUQ,EAAKf,KACfQ,EAAUO,EAAKC,KAAKxB,KACpBiB,EAAcM,EAAKC,KAAKf,SACxBS,EAAcK,EAAKC,KAAKd,SACxBS,EAAaI,EAAKjB,QAEnBQ,KAAKW,SAAS,CAACjB,KAAMO,EACnBf,KAAMgB,EACNN,SAAUQ,EACVT,SAAUQ,EACVX,QAASa,I,kDAIXvB,QAAQC,IAAR,M,6IAIF,OACA,6BAEIiB,KAAKf,MAAMO,QAAQ,GACnB,6BACE,wBAAIC,UAAU,cAAd,eACA,kBAACmB,EAAD,CACA3B,MAAOe,KAAKf,MACZO,QAASQ,KAAKf,MAAMO,QAAQ,MAG9B,yBAAKqB,MAAO,CACVC,MAAO,QACPC,SAAU,OACVC,aAAc,QACdC,UAAW,WAJb,uC,GAtDeC,aCDjBC,E,iLAGF,OAAQnB,KAAKnB,MAAMuC,uBAEdpB,KAAKnB,MAAMwC,qBAEZrB,KAAKnB,MAAMyC,OAGX,kBAAC,EAAD,CAAUhC,IAAKU,KAAKnB,MAAMyC,OAAOC,SAAUlC,IAAKW,KAAKnB,MAAMyC,OAAOE,YAGlE,yBAAKX,MAAO,CACRG,aAAc,QACdS,gBAAgB,OAAD,OAAS,wBAAT,KACfX,MAAO,QACPC,SAAU,SAJd,uBAPA,2DAFA,8E,GAJkBG,aAsBXQ,uBAAW,CACxBC,gBAAiB,CACbC,oBAAoB,GAExBC,oBAAqB,KAJRH,CAKXP,G,MCpBWW,MARf,WACE,OACE,yBAAKrC,UAAU,OACd,kBAAC,EAAD,QCKesC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4ebf80e0.chunk.js","sourcesContent":["import React from 'react';\n\nconst display = (props) => {\n  console.log(\"display props\", props)\n  const farenTemp = (((props.state.temp) - 273.15) * 9/5 + 32 ).toFixed(2);\n  let desc = ''\n  let lon = 0;\n  let lat = 0;\n  let mainClass = 'weatherBoxOther';\n\n  if (props.weather) {\n   desc = props.weather['main'];\n  }\n\n  if (props.state.lon){\n    lon = props.state.lon\n  }\n  if (props.state.lat){\n    lat = props.state.lat\n  }\n\nif ( lat < 36 && lat > 34 && lon > -79 && lon < -77 ) {\n  mainClass='weatherBoxWilm'\n}\n\n\nreturn (<div className={mainClass}>\n  <h3>The current weather in {props.state.name} is:</h3>\n  <ul>\n    <li><strong>Tempurature:</strong> {farenTemp} Farenheit</li>\n    <li><strong>Atmospheric Pressure:</strong> {props.state.pressure}</li>\n    <li><strong>Humidity:</strong> {props.state.humidity}%</li>\n    <li><strong>Sky:</strong> {desc}</li>\n    \n  </ul>\n</div>)\n}\n\nexport default display;","import React, {Component} from 'react';\n\nimport axios from 'axios';\nimport Display from './Display';\nrequire('dotenv').config();\n\nclass Fetching extends Component {\n  constructor(props) {\n    super(props)\n    this.state={lat: null, lon: null,\n    name: '', temp: null,\n    pressure: null,\n    humidity: null,\n    weather: [],\n     }\n   }\n\n   async componentDidMount(){\n    console.log(\"Fetching props++++++   \", this.state.props)\n\n  try {   \n      let nameVar = null\n      let tempVar = null\n      let pressureVar = null\n      let humidityVar = null\n      let weatherVar = null\n    \n      const { data }  = await axios.get(process.env.REACT_APP_API_URL + 'lat=' + this.props.lat + '&lon=' + this.props.lon + '&APPID=' + process.env.REACT_APP_API_KEY);\n\n      console.log(\"api_results...\", data)\n\n       nameVar = data.name\n       tempVar = data.main.temp\n       pressureVar = data.main.pressure\n       humidityVar = data.main.humidity\n       weatherVar = data.weather\n \n      this.setState({name: nameVar, \n        temp: tempVar, \n        humidity: humidityVar, \n        pressure: pressureVar, \n        weather: weatherVar, \n      })\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n  render(){\n    return(\n    <div >\n      {\n        this.state.weather[0] ? \n        <div>\n          <h1 className=\"mainHeader\">Weather App</h1>\n          <Display \n          state={this.state}\n          weather={this.state.weather[0]}\n          /> \n        </div> : \n        <div style={{\n          color: 'black', \n          fontSize: '80px', \n          marginBottom: '750px', \n          textAlign: 'center'}}>Loading Local Weather Data...'</div> }\n\n   </div>\n   )\n  }\n}\nexport default Fetching;","import React, {Component} from 'react';\nimport { geolocated } from \"react-geolocated\";\n\nimport Fetching from './Fetching';\n\nclass GeoLocation extends Component {\n  \n  render() {\n    return !this.props.isGeolocationAvailable ? (\n        <div>Your browser does not support Geolocation</div>\n    ) : !this.props.isGeolocationEnabled ? (\n        <div>Geolocation is not enabled</div>\n    ) : this.props.coords ? (\n       \n\n        <Fetching lat={this.props.coords.latitude} lon={this.props.coords.longitude} />\n\n    ) : (\n        <div style={{\n            marginBottom: '750px', \n            backgroundImage: `url(${\"./Wilm_Background.jpg\"})`, \n            color: 'black', \n            fontSize: '80px', }}>Finding Location...</div>\n        );\n    }\n}\n\nexport default geolocated({\n  positionOptions: {\n      enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n}) (GeoLocation);","import React from 'react';\nimport GeoLocation from './GeoLocation';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <GeoLocation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}